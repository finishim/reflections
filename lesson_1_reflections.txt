How did viewing a diff between two versions of a file help you see the bug that was introduced?

I was able to see what had changed between the two versions of the file.
The fc helped identify where the two versions differed, so I could focus my attention there.
Looking at both, difference was easy to spot.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

When working on projects with other people, it would enable changes from everyone to be tracked.
If I see that someone already has a function/class created for something, I would not need to duplicate the work.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Pro: Logical save points help identify what I did
Con: If I forget to save, I miss opportunities

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Systems like Git are generally used for files that are interdependent.
Google Docs like systems are usually for creating a document one at a time. They do not have much interdependency built in to the design.

How can you use the commands git log and git diff to view the history of files?

Git log shows me what happened at each version if I was smart enough to add comments to each of my versions.
Git diff lets me compare exactly what changed (what lines got added/deleted) between two versions. scroll down to see more, press q to quit.

How might using version control make you more confident to make changes that could break something?

I know that with 100% confidence, I can go back to exactly how the document/project was prior to my changes. There would be 
no doubt of "did I forget to add something back" after I reversed my code. That would make trying new things more bearable, less costly.

How do you want to use Git?

I want to try using git for future classes where I would be coding. Hopefully I would feel more confident coding that way.